// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/nonchan7720/go-storage-to-messenger/pkg/interfaces"
)

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishBinlog mocks base method.
func (m *MockPublisher) PublishBinlog(ctx context.Context, payload interfaces.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBinlog", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBinlog indicates an expected call of PublishBinlog.
func (mr *MockPublisherMockRecorder) PublishBinlog(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBinlog", reflect.TypeOf((*MockPublisher)(nil).PublishBinlog), ctx, payload)
}

// PublishOutbox mocks base method.
func (m *MockPublisher) PublishOutbox(ctx context.Context, producer string, outbox interfaces.Outbox) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishOutbox", ctx, producer, outbox)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishOutbox indicates an expected call of PublishOutbox.
func (mr *MockPublisherMockRecorder) PublishOutbox(ctx, producer, outbox interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishOutbox", reflect.TypeOf((*MockPublisher)(nil).PublishOutbox), ctx, producer, outbox)
}

// MockBackendPublisher is a mock of BackendPublisher interface.
type MockBackendPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockBackendPublisherMockRecorder
}

// MockBackendPublisherMockRecorder is the mock recorder for MockBackendPublisher.
type MockBackendPublisherMockRecorder struct {
	mock *MockBackendPublisher
}

// NewMockBackendPublisher creates a new mock instance.
func NewMockBackendPublisher(ctrl *gomock.Controller) *MockBackendPublisher {
	mock := &MockBackendPublisher{ctrl: ctrl}
	mock.recorder = &MockBackendPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendPublisher) EXPECT() *MockBackendPublisherMockRecorder {
	return m.recorder
}

// IsTarget mocks base method.
func (m *MockBackendPublisher) IsTarget(ctx context.Context, payload interfaces.SendPayload) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTarget", ctx, payload)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTarget indicates an expected call of IsTarget.
func (mr *MockBackendPublisherMockRecorder) IsTarget(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTarget", reflect.TypeOf((*MockBackendPublisher)(nil).IsTarget), ctx, payload)
}

// PublishBinlog mocks base method.
func (m *MockBackendPublisher) PublishBinlog(ctx context.Context, event interfaces.Event, payload interfaces.SendPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBinlog", ctx, event, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishBinlog indicates an expected call of PublishBinlog.
func (mr *MockBackendPublisherMockRecorder) PublishBinlog(ctx, event, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBinlog", reflect.TypeOf((*MockBackendPublisher)(nil).PublishBinlog), ctx, event, payload)
}

// PublishOutbox mocks base method.
func (m *MockBackendPublisher) PublishOutbox(ctx context.Context, producer string, outbox interfaces.Outbox) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishOutbox", ctx, producer, outbox)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishOutbox indicates an expected call of PublishOutbox.
func (mr *MockBackendPublisherMockRecorder) PublishOutbox(ctx, producer, outbox interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishOutbox", reflect.TypeOf((*MockBackendPublisher)(nil).PublishOutbox), ctx, producer, outbox)
}
