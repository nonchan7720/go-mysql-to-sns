// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nonchan7720/go-mysql-to-sns/pkg/ent/outbox"
	"github.com/nonchan7720/go-mysql-to-sns/pkg/ent/predicate"
)

// OutboxUpdate is the builder for updating Outbox entities.
type OutboxUpdate struct {
	config
	hooks    []Hook
	mutation *OutboxMutation
}

// Where appends a list predicates to the OutboxUpdate builder.
func (ou *OutboxUpdate) Where(ps ...predicate.Outbox) *OutboxUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetAggregateType sets the "aggregate_type" field.
func (ou *OutboxUpdate) SetAggregateType(s string) *OutboxUpdate {
	ou.mutation.SetAggregateType(s)
	return ou
}

// SetAggregateID sets the "aggregate_id" field.
func (ou *OutboxUpdate) SetAggregateID(s string) *OutboxUpdate {
	ou.mutation.SetAggregateID(s)
	return ou
}

// SetEvent sets the "event" field.
func (ou *OutboxUpdate) SetEvent(s string) *OutboxUpdate {
	ou.mutation.SetEvent(s)
	return ou
}

// SetPayload sets the "payload" field.
func (ou *OutboxUpdate) SetPayload(b []byte) *OutboxUpdate {
	ou.mutation.SetPayload(b)
	return ou
}

// SetRetryAt sets the "retry_at" field.
func (ou *OutboxUpdate) SetRetryAt(t time.Time) *OutboxUpdate {
	ou.mutation.SetRetryAt(t)
	return ou
}

// SetRetryCount sets the "retry_count" field.
func (ou *OutboxUpdate) SetRetryCount(i int) *OutboxUpdate {
	ou.mutation.ResetRetryCount()
	ou.mutation.SetRetryCount(i)
	return ou
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (ou *OutboxUpdate) SetNillableRetryCount(i *int) *OutboxUpdate {
	if i != nil {
		ou.SetRetryCount(*i)
	}
	return ou
}

// AddRetryCount adds i to the "retry_count" field.
func (ou *OutboxUpdate) AddRetryCount(i int) *OutboxUpdate {
	ou.mutation.AddRetryCount(i)
	return ou
}

// ClearRetryCount clears the value of the "retry_count" field.
func (ou *OutboxUpdate) ClearRetryCount() *OutboxUpdate {
	ou.mutation.ClearRetryCount()
	return ou
}

// Mutation returns the OutboxMutation object of the builder.
func (ou *OutboxUpdate) Mutation() *OutboxMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OutboxUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OutboxUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OutboxUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OutboxUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OutboxUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(outbox.Table, outbox.Columns, sqlgraph.NewFieldSpec(outbox.FieldID, field.TypeInt64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.AggregateType(); ok {
		_spec.SetField(outbox.FieldAggregateType, field.TypeString, value)
	}
	if value, ok := ou.mutation.AggregateID(); ok {
		_spec.SetField(outbox.FieldAggregateID, field.TypeString, value)
	}
	if value, ok := ou.mutation.Event(); ok {
		_spec.SetField(outbox.FieldEvent, field.TypeString, value)
	}
	if value, ok := ou.mutation.Payload(); ok {
		_spec.SetField(outbox.FieldPayload, field.TypeBytes, value)
	}
	if value, ok := ou.mutation.RetryAt(); ok {
		_spec.SetField(outbox.FieldRetryAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.RetryCount(); ok {
		_spec.SetField(outbox.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedRetryCount(); ok {
		_spec.AddField(outbox.FieldRetryCount, field.TypeInt, value)
	}
	if ou.mutation.RetryCountCleared() {
		_spec.ClearField(outbox.FieldRetryCount, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OutboxUpdateOne is the builder for updating a single Outbox entity.
type OutboxUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OutboxMutation
}

// SetAggregateType sets the "aggregate_type" field.
func (ouo *OutboxUpdateOne) SetAggregateType(s string) *OutboxUpdateOne {
	ouo.mutation.SetAggregateType(s)
	return ouo
}

// SetAggregateID sets the "aggregate_id" field.
func (ouo *OutboxUpdateOne) SetAggregateID(s string) *OutboxUpdateOne {
	ouo.mutation.SetAggregateID(s)
	return ouo
}

// SetEvent sets the "event" field.
func (ouo *OutboxUpdateOne) SetEvent(s string) *OutboxUpdateOne {
	ouo.mutation.SetEvent(s)
	return ouo
}

// SetPayload sets the "payload" field.
func (ouo *OutboxUpdateOne) SetPayload(b []byte) *OutboxUpdateOne {
	ouo.mutation.SetPayload(b)
	return ouo
}

// SetRetryAt sets the "retry_at" field.
func (ouo *OutboxUpdateOne) SetRetryAt(t time.Time) *OutboxUpdateOne {
	ouo.mutation.SetRetryAt(t)
	return ouo
}

// SetRetryCount sets the "retry_count" field.
func (ouo *OutboxUpdateOne) SetRetryCount(i int) *OutboxUpdateOne {
	ouo.mutation.ResetRetryCount()
	ouo.mutation.SetRetryCount(i)
	return ouo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (ouo *OutboxUpdateOne) SetNillableRetryCount(i *int) *OutboxUpdateOne {
	if i != nil {
		ouo.SetRetryCount(*i)
	}
	return ouo
}

// AddRetryCount adds i to the "retry_count" field.
func (ouo *OutboxUpdateOne) AddRetryCount(i int) *OutboxUpdateOne {
	ouo.mutation.AddRetryCount(i)
	return ouo
}

// ClearRetryCount clears the value of the "retry_count" field.
func (ouo *OutboxUpdateOne) ClearRetryCount() *OutboxUpdateOne {
	ouo.mutation.ClearRetryCount()
	return ouo
}

// Mutation returns the OutboxMutation object of the builder.
func (ouo *OutboxUpdateOne) Mutation() *OutboxMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OutboxUpdate builder.
func (ouo *OutboxUpdateOne) Where(ps ...predicate.Outbox) *OutboxUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OutboxUpdateOne) Select(field string, fields ...string) *OutboxUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Outbox entity.
func (ouo *OutboxUpdateOne) Save(ctx context.Context) (*Outbox, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OutboxUpdateOne) SaveX(ctx context.Context) *Outbox {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OutboxUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OutboxUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OutboxUpdateOne) sqlSave(ctx context.Context) (_node *Outbox, err error) {
	_spec := sqlgraph.NewUpdateSpec(outbox.Table, outbox.Columns, sqlgraph.NewFieldSpec(outbox.FieldID, field.TypeInt64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Outbox.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outbox.FieldID)
		for _, f := range fields {
			if !outbox.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != outbox.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.AggregateType(); ok {
		_spec.SetField(outbox.FieldAggregateType, field.TypeString, value)
	}
	if value, ok := ouo.mutation.AggregateID(); ok {
		_spec.SetField(outbox.FieldAggregateID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Event(); ok {
		_spec.SetField(outbox.FieldEvent, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Payload(); ok {
		_spec.SetField(outbox.FieldPayload, field.TypeBytes, value)
	}
	if value, ok := ouo.mutation.RetryAt(); ok {
		_spec.SetField(outbox.FieldRetryAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.RetryCount(); ok {
		_spec.SetField(outbox.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedRetryCount(); ok {
		_spec.AddField(outbox.FieldRetryCount, field.TypeInt, value)
	}
	if ouo.mutation.RetryCountCleared() {
		_spec.ClearField(outbox.FieldRetryCount, field.TypeInt)
	}
	_node = &Outbox{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
