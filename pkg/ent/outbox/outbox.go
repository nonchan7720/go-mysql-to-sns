// Code generated by ent, DO NOT EDIT.

package outbox

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the outbox type in the database.
	Label = "outbox"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAggregateType holds the string denoting the aggregate_type field in the database.
	FieldAggregateType = "aggregate_type"
	// FieldAggregateID holds the string denoting the aggregate_id field in the database.
	FieldAggregateID = "aggregate_id"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldRetryAt holds the string denoting the retry_at field in the database.
	FieldRetryAt = "retry_at"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// Table holds the table name of the outbox in the database.
	Table = "outbox"
)

// Columns holds all SQL columns for outbox fields.
var Columns = []string{
	FieldID,
	FieldAggregateType,
	FieldAggregateID,
	FieldEvent,
	FieldPayload,
	FieldRetryAt,
	FieldRetryCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Outbox queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAggregateType orders the results by the aggregate_type field.
func ByAggregateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAggregateType, opts...).ToFunc()
}

// ByAggregateID orders the results by the aggregate_id field.
func ByAggregateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAggregateID, opts...).ToFunc()
}

// ByEvent orders the results by the event field.
func ByEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvent, opts...).ToFunc()
}

// ByRetryAt orders the results by the retry_at field.
func ByRetryAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryAt, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}
